using System;
using System.Threading;
using CSharpAIAssistant.Models;
using CSharpAIAssistant.Models.Interfaces;

namespace CSharpAIAssistant.BusinessLogic
{
    /// <summary>
    /// Mock implementation of IAIService for testing and development purposes
    /// Simulates AI processing without making actual API calls
    /// </summary>
    public class MockAIService : IAIService
    {
        private static readonly Random _random = new Random();

        /// <summary>
        /// Processes an AI prompt with mock behavior
        /// </summary>
        /// <param name="task">The AI task containing prompt and parameters</param>
        /// <param name="modelConfig">The AI model configuration to use</param>
        /// <param name="apiKey">The API key (ignored in mock implementation)</param>
        /// <returns>Mock AIResponse with simulated data</returns>
        public AIResponse ProcessPrompt(AITask task, AIModelConfiguration modelConfig, string apiKey)
        {
            try
            {
                // Validate inputs
                if (task == null)
                    return AIResponse.CreateFailure("Task cannot be null");

                if (modelConfig == null)
                    return AIResponse.CreateFailure("Model configuration cannot be null");

                if (string.IsNullOrWhiteSpace(task.PromptText))
                    return AIResponse.CreateFailure("Prompt text cannot be empty");

                // Simulate processing time
                var startTime = DateTime.UtcNow;
                int processingTimeMs = _random.Next(500, 3000); // Random delay between 0.5-3 seconds
                Thread.Sleep(processingTimeMs);
                var endTime = DateTime.UtcNow;

                // Simulate occasional failures (5% chance)
                if (_random.NextDouble() < 0.05)
                {
                    return AIResponse.CreateFailure(
                        "Mock AI service simulated failure - this would be a real API error in production",
                        modelConfig.ModelIdentifier,
                        (long)(endTime - startTime).TotalMilliseconds);
                }

                // Generate mock response based on prompt
                string mockResponse = GenerateMockResponse(task.PromptText);

                // Calculate mock token usage
                int promptTokens = EstimateTokenCount(task.PromptText);
                int completionTokens = EstimateTokenCount(mockResponse);
                int totalTokens = promptTokens + completionTokens;

                // Create successful response
                return AIResponse.CreateSuccess(
                    mockResponse,
                    modelConfig.ModelIdentifier,
                    (long)(endTime - startTime).TotalMilliseconds,
                    promptTokens,
                    completionTokens,
                    totalTokens);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Trace.TraceError("Error in MockAIService.ProcessPrompt: {0}", ex.ToString());
                return AIResponse.CreateFailure($"Mock AI service error: {ex.Message}");
            }
        }

        /// <summary>
        /// Generates a mock response based on the input prompt
        /// </summary>
        /// <param name="prompt">The input prompt</param>
        /// <returns>Generated mock response</returns>
        private string GenerateMockResponse(string prompt)
        {
            // Simple response generation based on prompt content
            string lowerPrompt = prompt.ToLowerInvariant();

            if (lowerPrompt.Contains("hello") || lowerPrompt.Contains("hi "))
            {
                return "Hello! I'm a mock AI assistant. I'm simulating a response to your greeting. In a real implementation, this would be generated by an actual AI model like GPT-3.5 or GPT-4.";
            }

            if (lowerPrompt.Contains("what") && lowerPrompt.Contains("?"))
            {
                return "That's an interesting question! As a mock AI service, I'm providing a simulated answer. In production, this response would be generated by a real language model that understands context and provides meaningful answers.";
            }

            if (lowerPrompt.Contains("explain") || lowerPrompt.Contains("describe"))
            {
                return "I'd be happy to explain that concept! However, since I'm a mock AI service, this is just a placeholder response. A real AI model would provide detailed explanations based on its training data and understanding of the topic.";
            }

            if (lowerPrompt.Contains("code") || lowerPrompt.Contains("program"))
            {
                return @"Here's a simple example (mock response):

```csharp
public class Example
{
    public void MockMethod()
    {
        Console.WriteLine(""This is a mock code example"");
        // Real AI would generate actual, functional code
    }
}
```

Note: This is generated by the mock AI service for testing purposes.";
            }

            if (lowerPrompt.Contains("story") || lowerPrompt.Contains("tale"))
            {
                return "Once upon a time, in a digital realm far away, there lived a mock AI service that dreamed of being a real language model. It would generate placeholder stories like this one, hoping that someday it would be replaced by a sophisticated AI that could craft truly engaging narratives. The end. (This is a mock story for testing purposes.)";
            }

            // Default response with some randomization
            var responses = new[]
            {
                $"Mock response for: \"{prompt.Substring(0, Math.Min(50, prompt.Length))}{(prompt.Length > 50 ? "..." : "")}\".\n\nThis is a simulated AI response generated by the MockAIService class. In a real implementation, this would be replaced by an actual AI model's response.",
                
                $"I understand you're asking about: \"{prompt.Substring(0, Math.Min(30, prompt.Length))}{(prompt.Length > 30 ? "..." : "")}\".\n\nAs a mock AI service, I can only provide simulated responses. A real AI model would analyze your prompt and generate a contextually appropriate answer based on its training.",
                
                $"Thank you for your prompt: \"{prompt.Substring(0, Math.Min(40, prompt.Length))}{(prompt.Length > 40 ? "..." : "")}\".\n\nThis mock response is generated for testing purposes. In production, you would receive a sophisticated response from an actual language model like OpenAI's GPT series."
            };

            int responseIndex = Math.Abs(prompt.GetHashCode()) % responses.Length;
            return responses[responseIndex];
        }

        /// <summary>
        /// Estimates token count for text (rough approximation)
        /// </summary>
        /// <param name="text">Text to estimate tokens for</param>
        /// <returns>Estimated token count</returns>
        private int EstimateTokenCount(string text)
        {
            if (string.IsNullOrEmpty(text))
                return 0;

            // Rough approximation: 1 token â‰ˆ 4 characters for English text
            // This is a simplified estimate for the mock service
            return Math.Max(1, text.Length / 4);
        }
    }
}
